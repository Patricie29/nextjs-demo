{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/patricie/Desktop/VS-CODE/React with Max/15.NextJS_Project/pages/[meetupId]/index.js\",\n    _this = this;\n\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\";\n\nvar MeetupDetails = function MeetupDetails(props) {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(MeetupDetail, {\n      image: props.meetupDataProp.image,\n      address: props.meetupDataProp.address,\n      title: props.meetupDataProp.title,\n      description: props.meetupDataProp.description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 9\n    }, _this)\n  }, void 0, false);\n}; // you have to use this function only if you use getStaticProps\n\n\n_c = MeetupDetails;\nexport var __N_SSG = true;\nexport default MeetupDetails;\n\nvar _c;\n\n$RefreshReg$(_c, \"MeetupDetails\");","map":{"version":3,"sources":["/Users/patricie/Desktop/VS-CODE/React with Max/15.NextJS_Project/pages/[meetupId]/index.js"],"names":["MeetupDetail","MeetupDetails","props","meetupDataProp","image","address","title","description"],"mappings":";;;;;;AAAA,OAAOA,YAAP,MAAyB,uCAAzB;;AAGA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACC,KAAD,EAAW;AAG7B,sBAAO;AAAA,2BACH,QAAC,YAAD;AACI,MAAA,KAAK,EAAEA,KAAK,CAACC,cAAN,CAAqBC,KADhC;AAEI,MAAA,OAAO,EAAEF,KAAK,CAACC,cAAN,CAAqBE,OAFlC;AAGI,MAAA,KAAK,EAAEH,KAAK,CAACC,cAAN,CAAqBG,KAHhC;AAII,MAAA,WAAW,EAAEJ,KAAK,CAACC,cAAN,CAAqBI;AAJtC;AAAA;AAAA;AAAA;AAAA;AADG,mBAAP;AAQH,CAXD,C,CAaA;;;KAbMN,a;;AAgGN,eAAeA,aAAf","sourcesContent":["import MeetupDetail from \"../../components/meetups/MeetupDetail\"\nimport { MongoClient, ObjectId } from \"mongodb\"\n\nconst MeetupDetails = (props) => {\n\n\n    return <>\n        <MeetupDetail\n            image={props.meetupDataProp.image}\n            address={props.meetupDataProp.address}\n            title={props.meetupDataProp.title}\n            description={props.meetupDataProp.description} />\n    </>\n\n}\n\n// you have to use this function only if you use getStaticProps\nexport const getStaticPaths = async () => {\n\n    // fetch and connect to mongo db\n    const client = await MongoClient.connect('mongodb+srv://patriciesm:patriciesm@cluster0.dygl91p.mongodb.net/MeetupsNextJs?retryWrites=true&w=majority')  //connect returns a promise so we have to have this handler function as async\n\n    const db = client.db() // this is how you get hold of the database you're connecting to\n\n    const meetupCollection = db.collection('meetups') // volitelny nazev pro collection, pokud neexistuje tak se vytvori a pokud existuje tak se prida do existujici\n\n    const ourFetchedMeetups = await meetupCollection.find({}, { _id: 1 }).toArray() //toArray abychom dostaly zpet array of objects \n    // find({}) znamena najdi vse, muzeme ale pridat second argument find({}, { }) kde definujeme ktere fields chceme vytahnout, napriklad jenom jemno, nebo jenom id atd. _id: 1 znamena at vytahne jenom id values a nic jineho\n\n    client.close()\n\n    // tedka muzeme generovat paths dynamically \n    return {\n        // fallback will tell next js if our paths contain all possible parameters values  (all meetups) or just some of them \n        fallback: false,\n        // kdyz rekneme ze fallback je false tak rikame ze pouze ty paths, ktere tady mame vypsane s epredvygeneruji, coz znamena ze pokud by user zadal do url treba id ktere tu vypsane nemame, tak by se mu hodila error page.\n        // pokud alre reknes ze fallback je true tak si v podstate jenom vypsala nejake possible paths, treba ty ktere jsou nejpouzivanejsi, tak ty se predvygeneruji, a kdyby user klikl na neco co tu nemame, tak by se to vygenerovalo 'za chodu' tedy az pote co na to klikl\n\n        //DYNAMICALLY GENERATED PATHS\n        paths: ourFetchedMeetups.map((oneMeetup) => {\n            return {\n                params: {\n                    meetupId: oneMeetup._id.toString()\n                }\n            }\n        })\n\n        // HARDCODED\n        // paths: [\n        //     {\n        //         params: {\n        //             meetupId: 'meetup1'\n        //         }\n        //     },\n        //     {\n        //         params: {\n        //             meetupId: 'meetup2'\n        //         }\n        //     },\n        // ]\n    }\n}\n\n//using getstatiprops pregenerates all possible pages when you run npm run build. meaning it already pregerenaretes every page for every meetup  you have here\nexport const getStaticProps = async (context) => {\n    // fetch data for a singe meetup\n\n\n    // you have to display different data for each meetup. That changes depending on the id. So we need to get the id of the clicked meetup. Normaly we could use useRouter hook to extract the id from the url but here you cannot use any hooks. So we will use context parameter.\n\n    const meetupIDfromURL = context.params.meetupId   // tady to posledni slovo musi odpovidat tomu co mas v [ ] v pages, v nasem pripade tam mame [meetupId] a timto zpusobem si ziskala to id ktere se dalo do url\n\n    // fetch and connect to mongo db\n    const client = await MongoClient.connect('mongodb+srv://patriciesm:patriciesm@cluster0.dygl91p.mongodb.net/MeetupsNextJs?retryWrites=true&w=majority')  //connect returns a promise so we have to have this handler function as async\n\n    const db = client.db() // this is how you get hold of the database you're connecting to\n\n    const meetupCollection = db.collection('meetups') // volitelny nazev pro collection, pokud neexistuje tak se vytvori a pokud existuje tak se prida do existujici\n\n    const oneFetchedMeetup = await meetupCollection.findOne({ _id: ObjectId(meetupIDfromURL) }) //ObjectId je od mongodb a zajisti aby to bylo ve spravnem formatu \n\n    client.close()\n\n    return {\n        props: {\n            meetupDataProp: {\n                id: oneFetchedMeetup._id.toString(),\n                title: oneFetchedMeetup.title,\n                address: oneFetchedMeetup.address,\n                description: oneFetchedMeetup.description,\n                image: oneFetchedMeetup.image\n\n            }\n        }\n    }\n\n}\n\n\nexport default MeetupDetails\n\n"]},"metadata":{},"sourceType":"module"}